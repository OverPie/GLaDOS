from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.utils import get_random_id
from sqlgame import *
from loadevn import *
from util import *
from photo import *
from concurrent.futures import ThreadPoolExecutor, wait, as_completed
import vk_api, requests, sys
from vksql import *
from yourphoto import *
import pylibmc
import logging
from botutil import sqlcache
from economy import *
import mods
def mainlobby(vk, mc, event):
    events = event.type.name.lower()
    try:
        response = {"message":None}
        if "text" in dir(event) and "user_id" in dir(event):
            if event.from_me:
                uid = recipient
            else:
                uid = event.user_id
            if str(uid) in allowuser and "chat_id" not in dir(event):
                text = event.text.split()
                try:
                    requests = text[0].lower()
                    uberequests = " ".join(text[0:]).lower()
                except IndexError:
                    return
                if event.from_me:
                    uid = recipient
                else:
                    uid = event.user_id
                mc2 = sqlcache(mc, uid)
                givemoney(uid,mc2)
                photos = Photo(vk, text)
                prefix = mc2["prefix"]
                for module in mods.modules:
                    if module.included:
                        if requests in module.command and events in module.types or module.types == "runalways":
                            module = module(vk, vk)
                            module.givedata(uid=uid, text=text, event=event, mc2=mc2,
                                            prefix=prefix, peer=event.peer_id)
                            module.main()
                if requests == "/–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
                    response = calc(text)
                elif requests == "/–ø–æ–≥–æ–¥–∞":
                    response = weather(text)
                elif requests == "/—à–µ–ª–ª" and uid == 367919273:
                    response = shellrun(text)
                elif requests == "—Å–ª–∞–≤–∞":
                    response = {"message":"üá∫üá¶—É–∫—Ä–∞–∏–Ω–µüá∫üá¶", "attachment":None}
                elif requests in ["–ø—Ä–∏–≤–µ—Ç", "–∫—É", "–∑–∏–≥", "—Å–ø–æ–∫–∏", "—Å–ø–æ–∫–æ–π–Ω–æ–π"]:
                    response = answer(text)
                elif requests == "/off" and event.user_id == 367919273:
                    sys.exit()
                elif requests == "/help" or requests == "/—Ö–µ–ª–ø":
                    response = {"message":help, "attachment":None}
                elif requests == "/–∫—Ä–∞—Å–∏–ª–æ–≤":
                    vk.messages.send(user_id=event.user_id, random_id=get_random_id(),
                                    message="Krasyliv")
                elif requests == "/–∫–∞—Ç—ã":
                    response = photos.cats()
                elif requests == "/–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫":
                    response = translit(text, vk)
                elif requests == "/—é—Ä–∏":
                    response = photos.yuri()
                elif requests == "/–≥–µ–±–±–µ–ª—å—Å":
                    response = photos.gebbels()
                elif requests == "/—è–æ–π":
                    response = photos.yaoi()
                elif requests == "/—Ç—Ä–∞–ø—ã":
                    response = photos.trap()
                elif requests == "/–ª–æ–ª–∏":
                    response = photos.loli()
                elif requests == "/–æ—Ü–µ–Ω–∏":
                    response = doulikethis(text)
                elif requests == "/–≤–∏–∫–∏":
                    response = wiki(text)
                elif requests == "/–º–∞—Ö–Ω–æ":
                    response = photos.mahno()
                elif requests == "/—Ü–∏—Ç–∞—Ç—ã":
                    response = photos.citati()
                elif requests == "/–∫–∞–ª—è–Ω":
                    response = photos.colyan()
                elif requests == "/–≤–∏–¥–µ–æ":
                    response = video(vk, text)
                elif requests == "/–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å" or requests == "/—à–∞–Ω—Å—ã":
                    response = chance(text)
                elif requests == "/–≤—ã–±–µ—Ä–∏":
                    response = oror(text)
                # elif requests == "/—Å–º–µ—Ö":
                #     response = smex(text, uid)
                # elif requests == "/—Å–º–µ—Ö–∫":
                #     response = smex(text, uid, db=True)
                elif requests == "/–ø–æ–≤—Ç–æ—Ä–∏":
                    response = repeat(text)
                elif requests == "/–¥–æ–∫" or requests == "/–≥–∏—Ñ":
                    response = rdocs(vk, text)
                elif requests == "/–Ω–æ–≥–∏" or requests == "/–Ω–æ–∂–∫–∏":
                    response = photos.legs(vk,text)
                elif requests == "/–º–µ–º":
                    response = photos.mem()
                elif requests == "/–∫—Ç–æ":
                    response = who(vk, event, text)
                elif requests == "/–∫—É—Ä—Å":
                    response = valute(text)
                elif requests == "/–¥–∞—Ç–∞":
                    response = date(text)
                elif requests == "/—á–∏—Å–ª–æ":
                    response = number(text)
                elif requests == "/–∞–¥–æ–ª—å—Ñ" or requests == "/–≥–∏—Ç–ª–µ—Ä":
                    response = photos.adolf()
                elif requests == "/–ø—Ä–µ—Ñ–∏–∫—Å":
                    response = update(uid, text, mc)
                    mc2["prefix"] = " ".join(text[1:])
                elif requests == "/–∂–∏–≤?":
                    response = ping()
                elif requests == "/–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä":
                    response = convvalute(text)
                elif requests == "/–∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å":
                    response = vkbase64(text, encode=True)
                elif requests == "/—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å":
                    response = vkbase64(text, decode=True)
                elif requests == "/–∞–π–¥–∏":
                    response = nametoid(vk,  text)
                elif requests == "/–∏–¥–µ–∏":
                    response = tasks()
                elif requests == "/–±–∏–Ω–∞—Ä–Ω—ã–π0":
                    response = text_to_bits(text)
                elif requests == "/–±–∏–Ω–∞—Ä–Ω—ã–π1":
                    response = text_from_bits(text)
                elif requests == "/–¥–ª–∏–Ω–∞":
                    response = lentomsg(text)
                elif requests == "/–ø—Ä–æ—Ñ–∏–ª—å":
                    response = profile(uid, mc2)
                elif requests == "/—Å–æ–æ–±—â–µ–Ω–∏–π":
                    response = gethistorytols(vk, event)
                elif requests == "/–ø–∞—Ä–æ–ª—å":
                    response = genpass(text)
                elif requests == "/–∫–∞–ø–∏—Ç–∞–ª–∏–∑–º":
                    response = economylobby(uid, mc2, text)
                elif uberequests == "/—á–µ–∫–Ω–∏ –¥–æ–Ω–∞—Ç":
                    response = checkdonate(uid)
                    del mc[str(uid)]
                elif requests == "/–ø–æ—Å—Ç—ã":
                    response = postsearch(vk, text)

                elif requests == getcommand(uid, requests):
                    response = sendyourphoto(vk, text, uid, requests)
                elif "".join(text)[:8] == "/–∞–ª—å–±–æ–º—ã":
                    response = photoadd(vk, uid, text,mc2, number=text)
                    del mc[str(uid)]

            try:
                if response["message"]:
                    if "attachment" not in response:
                        response["attachment"] = None
                    prefix = mc2["prefix"]
                    # if "chat_id" in dir(event):
                    #     vk.messages.send(chat_id=event.chat_id, random_id=get_random_id(),
                    #                     message="–æ—Ç –±–æ—Ç–∞: " + response["message"], attachment=response["attachment"])
                    vk.messages.send(user_id=event.user_id, random_id=get_random_id(),
                                        message=f"–æ—Ç –±–æ—Ç–∞: {prefix}, {response['message']}",
                                        attachment=response["attachment"])
            except TypeError:
                return
    except KeyboardInterrupt:
        sys.exit()
def checkthread():
    global futures
    for x in as_completed(futures):
        if x.exception() != None:
            logging.error(x.exception())
        futures.remove(x)
vk_session = vk_api.VkApi(token=token22)
vk = vk_session.get_api()
longpoll = VkLongPoll(vk_session)
mc = pylibmc.Client(["127.0.0.1"])
pool = ThreadPoolExecutor(8)
logging.basicConfig(level=logging.INFO)
futures = []
for event in longpoll.listen():
    futures.append(pool.submit(mainlobby, vk, mc, event))
    pool.submit(checkthread)
