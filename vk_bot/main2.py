#!/usr/bin/python3.7
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.utils import get_random_id
from token2 import *
from util import *
from photo import *
from smeh import *
from vksql import *
from botutil import *
from yourphoto import *
from concurrent.futures import ThreadPoolExecutor, wait, as_completed
from yourgroup import *
from relation import *
import pylibmc, vk_api, logging, datetime
from sqlgame import *
from economy import *
def lobby(vk,vk2, mc, event):
    then = datetime.datetime.now()
    botmain(vk, event)
    response = {"message":None}
    if event.object.text:
        text = event.object.text.split()
        uid = event.object.from_id
        mc2 = sqlcache(mc, uid)
        if mc2["ban"]:
            return
        try:
            requests = text[0].lower()
            uberequests = " ".join(text[0:]).lower()
        except IndexError:
            return
        photos = Photo(vk2, text)
        if mc2["admins"]:
            if requests == "/–±–∞–Ω":
                response = ban(event.object.reply_message['from_id'])
                del mc[str(event.object.reply_message['from_id'])]
            elif requests == "/—Ä–∞–∑–±–∞–Ω":
                unban(event.object.reply_message['from_id'])
                del mc[str(event.object.reply_message['from_id'])]
            elif requests == "/—Ä–∞—Å—Å—ã–ª–∫–∞":
                sendall(event, text, vk)
            elif requests == "/—à–µ–ª–ª":
                response = shellrun(text)
            elif requests == "/–≤–∏–ø":
                tableadd("vips", "id", event.object.reply_message['from_id'])
                del mc[str(event.object.from_id)]
        if requests == "/–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
            response = calc(text)
        elif requests == "/–ø–æ–≥–æ–¥–∞":
            response = weather(text)
        elif uberequests == "—Å–ª–∞–≤–∞ —É–∫—Ä–∞–∏–Ω–µ":
            response = {"message":"üá∫üá¶–≥–µ—Ä–æ—è–º —Å–ª–∞–≤–∞üá∫üá¶"}
        elif requests in ["–ø—Ä–∏–≤–µ—Ç", "–∫—É", "–∑–∏–≥", "—Å–ø–æ–∫–∏", "—Å–ø–æ–∫–æ–π–Ω–æ–π"]:
            response = answer(text)
        elif requests in helpspisok:
            response = {"message":help}
        elif requests == "/–∫—Ä–∞—Å–∏–ª–æ–≤":
            vk.messages.send(user_id=event.user_id, random_id=get_random_id(),
                            message="Krasyliv")
        elif requests == "/–∫–∞—Ç—ã":
            response = photos.cats()
        elif requests == "/–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫":
            response = translit(text, vk)
        elif requests == "/—é—Ä–∏":
            response = photos.yuri()
        elif requests == "/–≥–µ–±–±–µ–ª—å—Å":
            response = photos.gebbels()
        elif requests == "/—è–æ–π":
            response = photos.yaoi()
        elif requests == "/—Ç—Ä–∞–ø—ã":
            response = photos.trap()
        elif requests == "/–ª–æ–ª–∏":
            response = photos.loli(vk2,text)
        elif requests == "/–æ—Ü–µ–Ω–∏":
            response = doulikethis(text)
        elif requests == "/–≤–∏–∫–∏":
            response = wiki(text)
        elif requests == "/–º–∞—Ö–Ω–æ":
            response = photos.mahno()
        elif requests == "/—Ü–∏—Ç–∞—Ç—ã":
            response = citati()
        elif requests == "/–∫–∞–ª—è–Ω":
            response = photos.colyan()
        elif requests == "/–≤–∏–¥–µ–æ":
            response = video()
        elif requests == "/–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å" or requests == "/—à–∞–Ω—Å—ã":
            response = chance(text)
        elif requests == "/—Ö–µ–Ω—Ç–∞–π":
            response = photos.hentai()
        elif requests == "/–≤—ã–±–µ—Ä–∏":
            response = oror(text)
        elif requests == "/—Å–º–µ—Ö":
            response = smex(text, uid)
        elif requests == "/—Å–º–µ—Ö–∫":
            response = smex(text, uid, db=True)
        elif requests == "/–ø–æ–≤—Ç–æ—Ä–∏":
            response = repeat(text)
        elif requests == "/–¥–æ–∫" or requests == "/–≥–∏—Ñ":
            response = rdocs()
        elif requests == "/–Ω–æ–≥–∏" or requests == "/–Ω–æ–∂–∫–∏":
            response = photos.legs()
        elif requests == "/–º–µ–º":
            response = photos.mem()
        elif requests == "/–∫—Ç–æ":
            response = who(vk, event, text)
        elif requests == "/–∫—É—Ä—Å":
            response = valute(text)
        elif requests == "/–¥–∞—Ç–∞":
            response = date(text)
        elif requests == "/—á–∏—Å–ª–æ":
            response = number(text)
        elif requests == "/–æ–Ω–ª–∞–π–Ω" or requests == "/online":
            response = online(vk, event)
        elif requests == "/–∞–¥–æ–ª—å—Ñ" or requests == "/–≥–∏—Ç–ª–µ—Ä":
            response = photos.adolf()
        elif requests == "/–ø—Ä–µ—Ñ–∏–∫—Å":
            response = update(uid,text, mc)
            del mc[str(uid)]
            mc2 = sqlcache(mc, uid)
        elif requests == "/–∂–∏–≤?":
            response = ping()
        elif requests == "/–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä":
            response = convvalute(text)
        elif requests == "/–Ω–æ–≤–æ—Å—Ç—å":
            response = news()
        elif requests == "/–∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å":
                response = vkbase64(text, encode=True)
        elif requests == "/—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å":
                response = vkbase64(text, decode=True)
        elif requests == "/–ø—Ä–æ—Ñ–∏–ª—å":
            response = profile(uid, mc2)
        elif requests == "/–±–∏–Ω–∞—Ä–Ω—ã–π0":
            response = text_to_bits(text)
        elif requests == "/–±–∏–Ω–∞—Ä–Ω—ã–π1":
            response = text_from_bits(text)
        elif requests == "/–ø–µ—Ä–µ—à–ª–∏":
            response = forward(event, vk, session, upload)
        elif requests == "/—Ö–µ—Å" or requests == "/—Ö–µ—Å—É—Å":
            response = photos.hesus()
        elif uberequests == "/–∞–Ω–∏–º–µ –Ω–∞ —Ñ–æ—Ç–æ":
            response = anime(event)
        elif requests == "/–∞–π–¥–∏":
            response = nametoid()
        elif requests == "/–∏–¥–µ–∏":
            response = tasks()
        elif requests == "/–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ":
            response = hello(chathello, event, vk, text)
        elif requests == "/encodeqr":
            response = qrcode(text, vk, upload, session)
        elif requests == "/decodeqr":
            response = encodeqr(event)
        elif "".join(text)[:7] == "/–≥—Ä—É–ø–ø—ã":
            response = groupadd(vk, uid, text, mc2, number=text)
            del mc[str(uid)]
        elif requests == "/–æ—Ç–Ω–æ—à–µ–Ω–∏—è":
            response = relation(event, vk, text)
        elif requests == "/–¥–ª–∏–Ω–∞":
            response = lentomsg(text)
        elif requests == "/–ø–∞—Ä–æ–ª—å":
            response = genpass(text)
        elif uberequests == "/—á–µ–∫–Ω–∏ –¥–æ–Ω–∞—Ç":
            response = checkdonate(uid)
        elif requests == getcommand(uid, requests):
            response = sendyourphoto(vk2, text, uid, requests)
        elif requests == "/–∫–∞–∑–∏–Ω–æ":
            response = economygame1(uid, text)
        elif requests == "/–ø–µ—Ä–µ–¥–∞—Ç—å":
            response = moneygift(text, uid)
        elif "".join(text)[:8] == "/–∞–ª—å–±–æ–º—ã":
            response = photoadd(vk, uid, text, mc2, number=text)
            del mc[str(uid)]

    try:
        if response["message"]:
            prefix = mc2["prefix"]
            if "attachment" not in response:
                response["attachment"] = None

            if event.chat_id:
                vk.messages.send(chat_id=event.chat_id, random_id=get_random_id(),
                                message=f"{prefix}, {response['message']}",
                                attachment=response["attachment"])
            else:
                vk.messages.send(user_id=event.object.from_id, random_id=get_random_id(),
                                message=f"{prefix}, {response['message']}",
                                attachment=response["attachment"])
            now = datetime.datetime.now()
            delta = now - then
            logging.info(f"–ù–∞ –∫–æ–º–∞–Ω–¥—É {requests} —É—à–ª–æ {delta.total_seconds()}")
        setmessages(uid)
        givemoney(uid,mc2)
    except TypeError:
        return
    except NameError:
        None
def checkthread(futures):
    for x in as_completed(futures):
        if x.exception() != None:
            logging.error(x.exception())
vk_session = vk_api.VkApi(token=token)
vk_session2 = vk_api.VkApi(token=token22)
vk = vk_session.get_api()
vk2 = vk_session2.get_api()
upload = VkUpload(vk)
longpoll = VkBotLongPoll(vk_session, group_idd)
mc = pylibmc.Client(["127.0.0.1"])
pool = ThreadPoolExecutor(8)
# logging.basicConfig(filename="info.log", level=logging.INFO, filemode="w")
logging.basicConfig(level=logging.INFO)
futures = []
for event in longpoll.listen():
    futures.append(pool.submit(lobby, vk, vk2, mc, event))
    pool.submit(checkthread, futures)
