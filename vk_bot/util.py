import vk_api, math, random, os, datetime, time, requests, base64
from vk_api.utils import get_random_id
import wikipedia
from token2 import group_idd, apinews
from vksql import *
wikipedia.set_lang("ru")
helpspisok = ["/help", "/—Ö–µ–ª–ø", "/–Ω–∞—á–∞—Ç—å", "/–ø–æ–º–æ—â—å", "/–∫–æ–º–∞–Ω–¥—ã"]
help = """–î—Ä–æ—É. –ï—Ç–æ –±–æ—Ç –∫–æ–º–∞–Ω–¥—ã –æ–≤–æ—â–µ–π. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
üßæ–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä - –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: /–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä 2 + 2
‚òÅ/–ø–æ–≥–æ–¥–∞ - –º–æ–Ω–∞ –ø–∏—Å–∞—Ç—å –≥–æ—Ä–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç = –∏–Ω–≥–∏—à, –∏–≥–Ω–æ—Ä = –æ—à–∏–±–∫–∞
‚ù§–ø—Ä–∏–≤–µ—Ç\—Å–ø–æ–∫–∏ - :–ó
üê± /–∫–∞—Ç—ã - —Å–∫–∏–Ω–µ—Ç –ø–∏–∫—á—É –∫–æ—Ç–∏–∫–∞ –∏–ª–∏ –Ω–µ–∫–æ
üá¨üáß - /–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
üè≥‚Äçüåà/—è–æ–π, —é—Ä–∏, —Ç—Ä–∞–ø—ã, –≥–µ–±–±–µ–ª—å—Å, –º–∞—Ö–Ω–æ, –∫–∞–ª—è–Ω, –º–µ–º, –Ω–æ–≥–∏\–Ω–æ–∂–∫–∏, –∞–¥–æ–ª—å—Ñ\–≥–∏—Ç–ª–µ—Ä - —Å–¥–µ–ª–∞–µ—Ç –≤–∞—à—É –∂–∏–∑–Ω—å –ª—É—á—à–µ üåö
–∞ —Ç–∞–∫ –∂–µ, –∫–ª—é—á -c –º–æ–∂–µ—Ç —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—á.
–ù–∞–ø—Ä–∏–º–µ—Ä: /—è–æ–π -c 7
üëçüèª/–æ—Ü–µ–Ω–∏ - –æ—Ü–µ–Ω–∫–∞ –ø–æ 10—Ç–∏ –±–∞–ª—å–Ω–æ–π —à–∫–∞–ª–µ
üìö /–≤–∏–∫–∏ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –≤–∏–∫–∏
üé¨/–≤–∏–¥–µ–æ –Ω–∞–∑–≤–∞–Ω–∏–µ - —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –≤–∏–¥–µ–æ —Å –≤–∞—à–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
‚úî/–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å /—à–∞–Ω—Å—ã - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —á–µ–≥–æ –ª–∏–±–æ
üåö/—Ö–µ–Ω—Ç–∞–π - üåöüåöüåö
‚ùì/–≤—ã–±–µ—Ä–∏ - /–≤—ã–±–µ—Ä–∏ –æ–≥—É—Ä—Ü—ã —Å –º–æ–ª–æ–∫–æ–º –∏–ª–∏ –≥—Ä–µ—á–∫–∞ —Å –∫–µ—Ç—á—É–ø–æ–º
üê¥/—Å–º–µ—Ö - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–º–µ—Ö–∞, —Å -h –≤—ã–¥–∞—Å—Ç —Å–ø—Ä–∞–≤–∫—É
üëÖ/–ø–æ–≤—Ç–æ—Ä–∏ - –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
üíæ/–≥–∏—Ñ –∏–ª–∏ /–¥–æ–∫ - —Å–∫–∏–Ω–µ—Ç –≤–∞–º –≥–∏—Ñ–∫—É –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
&#128064;/–∫—Ç–æ - –≤—ã–±–∏—Ä–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –±–µ—Å–µ–¥–µ –ø–æ–¥ –≤–∞—à–∏–º –ø—Ä–µ–¥–ª–æ–≥–æ–º
&#128181;/–∫—É—Ä—Å - –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –∏ –µ–≤—Ä–æ
‚ö∞/–¥–∞—Ç–∞ - –∫–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –≤–∞–º–∏ —Å–æ–±—ã—Ç–∏–µ
üé≤/—á–∏—Å–ª–æ - –≤—ã–±—Ä–∞—Ç—å —á–∏—Å–ª–æ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: /—á–∏—Å–ª–æ 1 500
&#128101;/–æ–Ω–ª–∞–π–Ω - –ø–æ–∫–∞–∂–µ—Ç –æ–Ω–ª–∞–π–Ω –±–µ—Å–µ–¥—ã
üîî/–ø—Ä–∏–∑—ã–≤ - –ø—Ä–∏–∑–æ–≤–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –±–µ—Å–µ–¥–µ
üë§/–ø—Ä–µ—Ñ–∏–∫—Å - –∫–∞–∫ –≤–∞—Å –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å –±–æ—Ç
üí±/–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä - –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç—ã, —Å usd –∏ eur (/–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä 5000 usd)
üîí/–∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å <–≤–∞—à —Ç–µ–∫—Å—Ç> /—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å <–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω—É–ª –±–æ—Ç –ø–æ—Å–ª–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è>
üì∞/–Ω–æ–≤–æ—Å—Ç—å - –ø–æ–∫–∞–∂–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
&#128102;/–ø—Ä–æ—Ñ–∏–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ
–¥–ª—è –∞–¥–º–∏–Ω–æ–≤:
    ‚õî - /–±–∞–Ω - –∑–∞–±–∞–Ω–∏—Ç —é–∑–µ—Ä–∞(–ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –µ–º—É –æ—Ç–≤–µ—á–∞—Ç—å)
    ‚úÖ - /—Ä–∞–∑–±–∞–Ω - —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —Ä–∞–∑–±–∞–Ω–∏—Ç
github.com/anar66/vk-bot
"""
def calc(text):
    try:
        x = text[1]; x = int(x)
        encalc = text[2]; encalc = encalc.lower()
        y = text[3]; y = int(y)
    except:
        return
    if encalc == "+" or encalc == "—Å–ª–æ–∂–µ–Ω–∏–µ":
        result = x + y
    elif encalc == "-" or encalc == "–≤—ã—á–∏—Ç–∞–Ω–∏–µ":
        result = x - y
    elif encalc == "*" or encalc == "—É–º–Ω–æ–∂–µ–Ω–∏–µ":
        result = x * y
    elif encalc == "**" or encalc == "—Å—Ç–µ–ø–µ–Ω—å" or encalc == "^":
        if x > 999 or y > 999:
            return
        result = x ** y
    elif encalc == "/":
        try:
            x / y
        except ZeroDivisionError:
            result = "–≤–∑–æ—Ä–≤–∞—Ç—å –ø–ª–∞–Ω–µ—Ç—É —Ö–æ—á–µ—à—å?"
    elif encalc == "–∫–æ—Ä–µ–Ω—å":
        result = math.sqrt(x), math.sqrt(y)
    elif encalc == "—Å–∏–Ω—É—Å":
        result = math.sin(x), math.sin(y)
    elif encalc == "–∫–æ—Å–∏–Ω—É—Å":
        result = math.cos(x), math.cos(y)
    else:
        return
    return {"message":"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {}".format(result), }
def translit(text, vk=None):
    apikey = "trnsl.1.1.20190508T201810Z.385ebfa1e596baa0.90672cf8655555b1b51ced31b03c2e8bb9bde46c"
    url = "https://translate.yandex.net/api/v1.5/tr.json/translate"
    url2 = "https://translate.yandex.net/api/v1.5/tr.json/detect"
    params = {"key": apikey,
                "text":text[1:]}
    r = requests.get(url2, params=params)
    encode = r.json()
    lang = f"{encode['lang']}-ru"
    params = {"key": apikey,
            "text":text[0:],
            "lang":lang}
    r = requests.get(url, params=params)
    encode = r.json()
    try:
        if vk:
            encode = " ".join(encode["text"][1:])
            return {"message":"–ü–µ—Ä–µ–≤–æ–¥: {}".format(encode),}
    except:
        return
    return encode["text"][0]
def weather(text):
    try:
        qr = text[1]
    except:
        return
    q = translit(text=qr); q.lower()
    apiurl = "http://api.openweathermap.org/data/2.5/find"
    appid = '22c7bf8e593c47b0cf88f390e8e5376a'
    params = {
                'q': q,
                'appid': appid,
                'units': 'metric',
                'lang': 'ru'
                }
    try:
        r = requests.get(apiurl, params=params, timeout=5)
        encode = r.json()
        w = encode['list'][0]['weather'][0]['description']
        temp = encode["list"][0]["main"]["temp"]
        vlaga = encode["list"][0]["main"]["humidity"]
        wind = encode["list"][0]["wind"]["speed"]
    except:
        return
    return {"message":f"""–ì–æ—Ä–æ–¥: {q}
    üå•–ü–æ–≥–æ–¥–∞: {w}
    üå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞
    üíß–í–ª–∞–∂–Ω–æ—Å—Ç—å: {vlaga}
    üí®–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind}–º/—Å""",
    }
def answer(text):
    zapros = text[0].lower()
    if zapros == "—Å–ø–æ–∫–∏" or zapros == "—Å–ø–æ–∫–æ–π–Ω–æ–π":
        answer = ["–°–ø–æ—Ç—å–∫–∏", "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏", "–°–ø–∏, –Ω–æ —è –ø—Ä–∏–¥—É –∏ –≤—ã–µ–±—É —Ç–µ–±—è –∏—Å—Ç–æ—Ä–∏–µ–π –∞–∏—Ä"
                  ,"–°–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤", "–≠—Ä–æ—Ç–∏—à–Ω—ã—Ö —Å–Ω–æ–≤üåöüåöüåö"]
    else:
        answer = ["–ö—É–∫", "–∑–∏–≥ —Ö–∞–π–ª—å", "–∫—É–∫—É –Ω–∞—Ö—É–π",
                   "üá∫üá¶—Å–ª–∞–≤–∞ —É–∫—Ä–∞–∏–Ω–µüá∫üá¶", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–∑–¥—Ä–∞–≤–∏—è –∂–µ–ª–∞—é"]
    return {"message":random.choice(answer),}
def doulikethis(text):
    osenka = random.randint(0, 10)
    text = " ".join(text[1:])
    return {"message": f"–ú–æ—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ {text}: {osenka}/10", }
def wiki(text):
    text = " ".join(text[1:])
    try:
        wikiotvet = wikipedia.summary(text, sentences=3)
        if len(wikiotvet) < 355:
            wikiotvet = wikipedia.summary(text, sentences=6)
    except wikipedia.exceptions.DisambiguationError:
        wikiotvet = "—Ç–æ—á–Ω–µ–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"
    except wikipedia.exceptions.PageError:
        wikiotvet = "—Ç–∞–∫–æ–≥–æ –Ω–µ—Ç"
    return {"message":wikiotvet}
def video(vk, text):
    text = " ".join(text[1:])
    try:
        video = vk.video.search(q=text, count=50)
        video = random.choice(video["items"])
        videoid = video["id"]
        videoow = video["owner_id"]
    except IndexError:
        return {"message":"–Ω–∏—á–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}
    video = f"video{videoow}_{videoid}"
    return{"message": f"–í–µ–¥–æ—Å–∏–∫ –ø–æ –∑–∞–∫–∞–∑—É - {text}:", "attachment":video}
def chance(text):
    text = " ".join(text[1:])
    rnd =  random.randint(0, 100)
    message = f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {text} —Ä–∞–≤–Ω–∞ {rnd}%"
    return {"message":message, }
def oror(text):
    text = " ".join(text[1:])
    text = random.choice(text.split("–∏–ª–∏"))
    return {"message":f"—è –≤—ã–±–∏—Ä–∞—é: {text}", }
def repeat(text):
    text = " ".join(text[1:])
    return{"message": text, }
def rdocs(vk, text):
    text = " ".join(text[1:])
    try:
        docs = vk.docs.search(q=text, count=200)
        docs = random.choice(docs["items"])
    except IndexError:
        return{"message": "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"}
    docsid = docs["id"]
    docsow = docs["owner_id"]
    docs = f"doc{docsow}_{docsid}"
    return{"message": f"–ì–∏—Ñ–∫–∞/–¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –∑–∞–∫–∞–∑—É - {text}:", "attachment":docs}
# def nowtime():
#     vrema = datetime.datetime.now()
#     return f"{vrema.day} —á–∏—Å–ª–∞, {vrema.hour}:{vrema.minute}"
def status(vk, msgcount):
    vk.status.set(text=f"‚úâ—Å–æ–æ–±—â–µ–Ω–∏–π: {msgcount}", group_id=group_idd)

def who(vk, event, text):
    try:
        whotext = ' '.join(text[1:])
        whoid = random.choice(vk.messages.getConversationMembers(peer_id=event.object.peer_id)['profiles'])
        whofirstname = whoid['first_name']
        wholastname = whoid['last_name']
        whoidstr = whoid['id']
        return {"message":f"–ö—Ç–æ {whotext}? –Ø –¥—É–º–∞—é, —ç—Ç–æ @id{whoidstr} ({whofirstname} {wholastname})", }
    except:
        return {"message":"–î–ª—è —Ä–∞–±–æ—Ç—ã —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç—É –Ω—É–∂–Ω–∞ –∞–¥–º–∏–Ω–∫–∞ –≤ –±–µ—Å–µ–¥–µ!", }
def valute(text):
        api = "https://www.cbr-xml-daily.ru/daily_json.js"
        r = requests.get(api)
        encode = r.json()
        usd = encode["Valute"]["USD"]["Value"]
        eur = encode["Valute"]["EUR"]["Value"]
        return {"message":"–î–æ–ª–ª–∞—Ä: {}‚ÇΩ\n–ï–≤—Ä–æ: {}‚ÇΩ".format(usd, eur), }
def date(text):
    text = " ".join(text[1:])
    day = random.randint(1,31)
    moth = random.randint(1,12)
    year = random.randint(2019, 2100)
    when = year-2019
    event = f"–î–∞—Ç–∞ {text}: {day}.{moth}.{year}, —á–µ—Ä–µ–∑ {when} –ª–µ—Ç"
    return {"message":event, }
def number(text):
    try:
        x = int(text[1])
        y = int(text[2])
        nubmer2 = random.randint(x, y)
    except:
        return
    return {"message":f"–ß–∏—Å–ª–æ: {nubmer2}"}
def online(vk, event):
    onlinenumber = 0
    onlinelist = []
    onlineid = vk.messages.getConversationMembers(peer_id=event.object.peer_id)['profiles']
    for a in onlineid:
        if a['online'] == 1:
            onlinenumber+=1
            onlinelist.append(f"{str(onlinenumber)}. {a['first_name']} {a['last_name']}")
    onlinejoin = "\n".join(onlinelist)
    return {"message":f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ –æ–Ω–ª–∞–π–Ω:\n{onlinejoin}"}
def callall(vk, event):
    calllist = []
    callid = vk.messages.getConversationMembers(peer_id=event.object.peer_id)['profiles']
    for a in callid:
        calllist.append(f"@id{str(a['id'])} ({a['first_name']} {a['last_name']})")
    calljoin = ", ".join(calllist)
    return {"message":f"–Ø –ü–†–ò–ó–´–í–ê–Æ –í–ê–°:\n{calljoin}"}
def getusername(vk, uid):
    try:
        requests = vk.users.get(user_ids=uid, fields="first_name")
    except vk_api.exceptions.ApiError:
        return
    response = requests[0]["first_name"]
    return response
def ping():
    return {"message":"JA JA F√ºhrer"}
def convvalute(text):
        api = "https://www.cbr-xml-daily.ru/daily_json.js"
        r = requests.get(api)
        encode = r.json()
        usd = encode["Valute"]["USD"]["Value"]
        eur = encode["Valute"]["EUR"]["Value"]
        try:
            val = float(text[1])
        except ValueError:
            return {"message": "–¢—ã –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ —Ü–∏—Ñ—Ä—É!\n–ù–∞–ø—Ä–∏–º–µ—Ä: /–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä 5 usd"}
        if val <= 0:
            return {"message": "–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!"}
        elif text[2] == "usd":
            return {"message": f"üí∞{'%g'%val}$:\n–í —Ä—É–±–ª—è—Ö: {round(val*usd, 3)}‚ÇΩ\n–í –µ–≤—Ä–æ: {round(val*usd/eur, 3)}‚Ç¨"}
        elif text[2] == "eur":
            return {"message": f"üí∞{'%g'%val}‚Ç¨:\n–í —Ä—É–±–ª—è—Ö: {round(val*eur, 3)}‚ÇΩ\n–í –¥–æ–ª–ª–∞—Ä–∞—Ö:{round(val*eur/usd, 3)}$"}
        else:
            return {"message": "–í—ã–±–µ—Ä–∏: usd –∏–ª–∏ eur!\n–ù–∞–ø—Ä–∏–º–µ—Ä: /–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä 5 usd"}
def news():
    api = 'https://newsapi.org/v2/top-headlines'
    params = {
                'apiKey': apinews,
                'country': 'ru'
                }
    r = requests.get(api, params=params, timeout=5)
    encode = r.json()
    newsjson = random.choice(encode['articles'])
    return {'message': f"{newsjson['title']}\n\n{newsjson['description']}\n\n–ü–æ–ª–Ω—É—é —Å—Ç–∞—Ç—å—é –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–¥–µ—Å—å: {newsjson['url']}"}
def vkbase64(text, encode=False, decode=False):
    text = " ".join(text[1:])
    if encode:
        result = base64.b64encode(bytes(text, 'utf-8'))
    else:
        result = base64.b64decode(text)
    return {"message":result.decode('utf-8')}
def profile(event, uid, uname):
    if checktable("admins","id", uid):
        user = "–ê–¥–º–∏–Ωüòé"
    else:
        user = "–Æ–∑–µ—Ä"
    return {"message": f"""–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:
üë¶| –†–æ–ª—å: {user}
üîë| –ü—Ä–µ—Ñ–∏–∫—Å: {saveload(uid, uname)['name']}
üìÉ| –ê–π–¥–∏: id{event.object.from_id}"""}
